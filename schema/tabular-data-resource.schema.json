{
  "$id": "https://specs.frictionlessdata.io/schemas/tabular-data-resource.json",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "A Tabular Data Resource.",
  "oneOf": [
    {
      "required": [
        "name",
        "data",
        "schema",
        "profile"
      ]
    },
    {
      "required": [
        "name",
        "path",
        "schema",
        "profile"
      ]
    }
  ],
  "properties": {
    "bytes": {
      "description": "The size of this resource in bytes.",
      "examples": [
        "{\n  \"bytes\": 2082\n}\n"
      ],
      "options": {
        "hidden": true
      },
      "propertyOrder": 110,
      "title": "Bytes",
      "type": "integer"
    },
    "data": {
      "description": "Inline data for this resource.",
      "propertyOrder": 230,
      "title": "Data"
    },
    "description": {
      "description": "A text description. Markdown is encouraged.",
      "examples": [
        "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
      ],
      "format": "textarea",
      "propertyOrder": 60,
      "title": "Description",
      "type": "string"
    },
    "dialect": {
      "description": "The CSV dialect descriptor.",
      "examples": [
        "{\n  \"dialect\": {\n    \"delimiter\": \";\"\n  }\n}\n",
        "{\n  \"dialect\": {\n    \"delimiter\": \"\\t\",\n    \"quoteChar\": \"'\",\n    \"commentChar\": \"#\"\n  }\n}\n"
      ],
      "properties": {
        "caseSensitiveHeader": {
          "context": "Use of case in source CSV files is not always an intentional decision. For example, should \"CAT\" and \"Cat\" be considered to have the same meaning.",
          "default": false,
          "description": "Specifies if the case of headers is meaningful.",
          "examples": [
            "{\n  \"caseSensitiveHeader\": true\n}\n"
          ],
          "title": "Case Sensitive Header",
          "type": "boolean"
        },
        "commentChar": {
          "description": "Specifies that any row beginning with this one-character string, without preceeding whitespace, causes the entire line to be ignored.",
          "examples": [
            "{\n  \"commentChar\": \"#\"\n}\n"
          ],
          "title": "Comment Character",
          "type": "string"
        },
        "csvddfVersion": {
          "default": 1.2,
          "description": "A number to indicate the schema version of CSV Dialect. Version 1.0 was named CSV Dialect Description Format and used different field names.",
          "examples:": [
            "{\n  \"csvddfVersion\": \"1.2\"\n}\n"
          ],
          "title": "CSV Dialect schema version",
          "type": "number"
        },
        "delimiter": {
          "default": ",",
          "description": "A character sequence to use as the field separator.",
          "examples": [
            "{\n  \"delimiter\": \",\"\n}\n",
            "{\n  \"delimiter\": \";\"\n}\n"
          ],
          "title": "Delimiter",
          "type": "string"
        },
        "doubleQuote": {
          "context": "If Double Quote is set to true, two consecutive quotes must be interpreted as one.",
          "default": true,
          "description": "Specifies the handling of quotes inside fields.",
          "examples": [
            "{\n  \"doubleQuote\": true\n}\n"
          ],
          "title": "Double Quote",
          "type": "boolean"
        },
        "escapeChar": {
          "description": "Specifies a one-character string to use as the escape character.",
          "examples": [
            "{\n  \"escapeChar\": \"\\\\\"\n}\n"
          ],
          "title": "Escape Character",
          "type": "string"
        },
        "header": {
          "default": true,
          "description": "Specifies if the file includes a header row, always as the first row in the file.",
          "examples": [
            "{\n  \"header\": true\n}\n"
          ],
          "title": "Header",
          "type": "boolean"
        },
        "lineTerminator": {
          "default": "\r\n",
          "description": "Specifies the character sequence that must be used to terminate rows.",
          "examples": [
            "{\n  \"lineTerminator\": \"\\r\\n\"\n}\n",
            "{\n  \"lineTerminator\": \"\\n\"\n}\n"
          ],
          "title": "Line Terminator",
          "type": "string"
        },
        "nullSequence": {
          "description": "Specifies the null sequence, for example, `\\N`.",
          "examples": [
            "{\n  \"nullSequence\": \"\\N\"\n}\n"
          ],
          "title": "Null Sequence",
          "type": "string"
        },
        "quoteChar": {
          "default": "\"",
          "description": "Specifies a one-character string to use as the quoting character.",
          "examples": [
            "{\n  \"quoteChar\": \"'\"\n}\n"
          ],
          "title": "Quote Character",
          "type": "string"
        },
        "skipInitialSpace": {
          "default": false,
          "description": "Specifies the interpretation of whitespace immediately following a delimiter. If false, whitespace immediately after a delimiter should be treated as part of the subsequent field.",
          "examples": [
            "{\n  \"skipInitialSpace\": true\n}\n"
          ],
          "title": "Skip Initial Space",
          "type": "boolean"
        }
      },
      "propertyOrder": 50,
      "required": [
        "delimiter",
        "doubleQuote"
      ],
      "title": "CSV Dialect",
      "type": [
        "string",
        "object"
      ]
    },
    "encoding": {
      "default": "utf-8",
      "description": "The file encoding of this resource.",
      "examples": [
        "{\n  \"encoding\": \"utf-8\"\n}\n"
      ],
      "propertyOrder": 100,
      "title": "Encoding",
      "type": "string"
    },
    "format": {
      "context": "`csv`, `xls`, `json` are examples of common formats.",
      "description": "The file format of this resource.",
      "examples": [
        "{\n  \"format\": \"xls\"\n}\n"
      ],
      "propertyOrder": 80,
      "title": "Format",
      "type": "string"
    },
    "hash": {
      "description": "The MD5 hash of this resource. Indicate other hashing algorithms with the {algorithm}:{hash} format.",
      "examples": [
        "{\n  \"hash\": \"d25c9c77f588f5dc32059d2da1136c02\"\n}\n",
        "{\n  \"hash\": \"SHA256:5262f12512590031bbcc9a430452bfd75c2791ad6771320bb4b5728bfb78c4d0\"\n}\n"
      ],
      "options": {
        "hidden": true
      },
      "pattern": "^([^:]+:[a-fA-F0-9]+|[a-fA-F0-9]{32}|)$",
      "propertyOrder": 120,
      "title": "Hash",
      "type": "string"
    },
    "homepage": {
      "description": "The home on the web that is related to this data package.",
      "examples": [
        "{\n  \"homepage\": \"http://example.com/\"\n}\n"
      ],
      "format": "uri",
      "propertyOrder": 70,
      "title": "Home Page",
      "type": "string"
    },
    "licenses": {
      "context": "This property is not legally binding and does not guarantee that the package is licensed under the terms defined herein.",
      "description": "The license(s) under which the resource is published.",
      "examples": [
        "{\n  \"licenses\": [\n    {\n      \"name\": \"odc-pddl-1.0\",\n      \"path\": \"http://opendatacommons.org/licenses/pddl/\",\n      \"title\": \"Open Data Commons Public Domain Dedication and License v1.0\"\n    }\n  ]\n}\n"
      ],
      "items": {
        "anyOf": [
          {
            "required": [
              "name"
            ]
          },
          {
            "required": [
              "path"
            ]
          }
        ],
        "context": "Use of this property does not imply that the person was the original creator of, or a contributor to, the data in the descriptor, but refers to the composition of the descriptor itself.",
        "description": "A license for this descriptor.",
        "properties": {
          "name": {
            "description": "MUST be an Open Definition license identifier, see http://licenses.opendefinition.org/",
            "pattern": "^([-a-zA-Z0-9._])+$",
            "title": "Open Definition license identifier",
            "type": "string"
          },
          "path": {
            "context": "Implementations need to negotiate the type of path provided, and dereference the data accordingly.",
            "description": "A fully qualified URL, or a POSIX file path.",
            "examples": [
              "{\n  \"path\": \"file.csv\"\n}\n",
              "{\n  \"path\": \"http://example.com/file.csv\"\n}\n"
            ],
            "pattern": "^(?=^[^./~])(^((?!\\.{2}).)*$).*$",
            "title": "Path",
            "type": "string"
          },
          "title": {
            "description": "A human-readable title.",
            "examples": [
              "{\n  \"title\": \"My Package Title\"\n}\n"
            ],
            "title": "Title",
            "type": "string"
          }
        },
        "title": "License",
        "type": "object"
      },
      "minItems": 1,
      "options": {
        "hidden": true
      },
      "propertyOrder": 150,
      "title": "Licenses",
      "type": "array"
    },
    "mediatype": {
      "description": "The media type of this resource. Can be any valid media type listed with [IANA](https://www.iana.org/assignments/media-types/media-types.xhtml).",
      "examples": [
        "{\n  \"mediatype\": \"text/csv\"\n}\n"
      ],
      "pattern": "^(.+)/(.+)$",
      "propertyOrder": 90,
      "title": "Media Type",
      "type": "string"
    },
    "name": {
      "context": "This is ideally a url-usable and human-readable name. Name `SHOULD` be invariant, meaning it `SHOULD NOT` change when its parent descriptor is updated.",
      "description": "An identifier string. Lower case characters with `.`, `_`, `-` and `/` are allowed.",
      "examples": [
        "{\n  \"name\": \"my-nice-name\"\n}\n"
      ],
      "pattern": "^([-a-z0-9._/])+$",
      "propertyOrder": 20,
      "title": "Name",
      "type": "string"
    },
    "path": {
      "context": "The dereferenced value of each referenced data source in `path` `MUST` be commensurate with a native, dereferenced representation of the data the resource describes. For example, in a *Tabular* Data Resource, this means that the dereferenced value of `path` `MUST` be an array.",
      "description": "A reference to the data for this resource, as either a path as a string, or an array of paths as strings. of valid URIs.",
      "examples": [
        "{\n  \"path\": [\n    \"file.csv\",\n    \"file2.csv\"\n  ]\n}\n",
        "{\n  \"path\": [\n    \"http://example.com/file.csv\",\n    \"http://example.com/file2.csv\"\n  ]\n}\n",
        "{\n  \"path\": \"http://example.com/file.csv\"\n}\n"
      ],
      "oneOf": [
        {
          "context": "Implementations need to negotiate the type of path provided, and dereference the data accordingly.",
          "description": "A fully qualified URL, or a POSIX file path.",
          "examples": [
            "{\n  \"path\": \"file.csv\"\n}\n",
            "{\n  \"path\": \"http://example.com/file.csv\"\n}\n"
          ],
          "pattern": "^(?=^[^./~])(^((?!\\.{2}).)*$).*$",
          "title": "Path",
          "type": "string"
        },
        {
          "examples": [
            "[ \"file.csv\" ]\n",
            "[ \"http://example.com/file.csv\" ]\n"
          ],
          "items": {
            "context": "Implementations need to negotiate the type of path provided, and dereference the data accordingly.",
            "description": "A fully qualified URL, or a POSIX file path.",
            "examples": [
              "{\n  \"path\": \"file.csv\"\n}\n",
              "{\n  \"path\": \"http://example.com/file.csv\"\n}\n"
            ],
            "pattern": "^(?=^[^./~])(^((?!\\.{2}).)*$).*$",
            "title": "Path",
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      ],
      "propertyOrder": 30,
      "title": "Path"
    },
    "profile": {
      "context": "Every Package and Resource descriptor has a profile. The default profile, if none is declared, is `data-package` for Package and `data-resource` for Resource.",
      "description": "The profile of this descriptor.",
      "enum": [
        "tabular-data-resource"
      ],
      "examples": [
        "{\n  \"profile\": \"tabular-data-package\"\n}\n",
        "{\n  \"profile\": \"http://example.com/my-profiles-json-schema.json\"\n}\n"
      ],
      "propertyOrder": 10,
      "title": "Profile",
      "type": "string"
    },
    "schema": {
      "description": "A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.",
      "examples": [
        "{\n  \"schema\": {\n    \"fields\": [\n      {\n        \"name\": \"first_name\",\n        \"type\": \"string\"\n        \"constraints\": {\n          \"required\": true\n        }\n      },\n      {\n        \"name\": \"age\",\n        \"type\": \"integer\"\n      },\n    ],\n    \"primaryKey\": [\n      \"name\"\n    ]\n  }\n}\n"
      ],
      "properties": {
        "fields": {
          "description": "An `array` of Table Schema Field objects.",
          "examples": [
            "{\n  \"fields\": [\n    {\n      \"name\": \"my-field-name\"\n    }\n  ]\n}\n",
            "{\n  \"fields\": [\n    {\n      \"name\": \"my-field-name\",\n      \"type\": \"number\"\n    },\n    {\n      \"name\": \"my-field-name-2\",\n      \"type\": \"string\",\n      \"format\": \"email\"\n    }\n  ]\n}\n"
          ],
          "items": {
            "anyOf": [
              {
                "description": "The field contains strings, that is, sequences of characters.",
                "examples": [
                  "{\n  \"name\": \"name\",\n  \"type\": \"string\"\n}\n",
                  "{\n  \"name\": \"name\",\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n",
                  "{\n  \"name\": \"name\",\n  \"type\": \"string\",\n  \"constraints\": {\n    \"minLength\": 3,\n    \"maxLength\": 35\n  }\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `string` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maxLength": {
                        "description": "An integer that specifies the maximum length of a value.",
                        "type": "integer"
                      },
                      "minLength": {
                        "description": "An integer that specifies the minimum length of a value.",
                        "type": "integer"
                      },
                      "pattern": {
                        "context": "Regular expressions `SHOULD` conform to the [XML Schema regular expression syntax](http://www.w3.org/TR/xmlschema-2/#regexs).",
                        "description": "A regular expression pattern to test each value of the property against, where a truthy response indicates validity.",
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: any valid string.\n  * **email**: A valid email address.\n  * **uri**: A valid URI.\n  * **binary**: A base64 encoded string representing binary data.\n  * **uuid**: A string that is a uuid.",
                    "default": "default",
                    "description": "The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.",
                    "enum": [
                      "default",
                      "email",
                      "uri",
                      "binary",
                      "uuid"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `string`.",
                    "enum": [
                      "string"
                    ]
                  }
                },
                "required": [
                  "name"
                ],
                "title": "String Field",
                "type": "object"
              },
              {
                "context": "The lexical formatting follows that of decimal in [XMLSchema](https://www.w3.org/TR/xmlschema-2/#decimal): a non-empty finite-length sequence of decimal digits separated by a period as a decimal indicator. An optional leading sign is allowed. If the sign is omitted, '+' is assumed. Leading and trailing zeroes are optional. If the fractional part is zero, the period and following zero(es) can be omitted. For example: '-1.23', '12678967.543233', '+100000.00', '210'.\n\nThe following special string values are permitted (case does not need to be respected):\n  - NaN: not a number\n  - INF: positive infinity\n  - -INF: negative infinity\n\nA number `MAY` also have a trailing:\n  - exponent: this `MUST` consist of an E followed by an optional + or - sign followed by one or more decimal digits (0-9)\n  - percentage: the percentage sign: `%`. In conversion percentages should be divided by 100.\n\nIf both exponent and percentages are present the percentage `MUST` follow the exponent e.g. '53E10%' (equals 5.3).",
                "description": "The field contains numbers of any kind including decimals.",
                "examples": [
                  "{\n  \"name\": \"field-name\",\n  \"type\": \"number\"\n}\n",
                  "{\n  \"name\": \"field-name\",\n  \"type\": \"number\",\n  \"constraints\": {\n    \"enum\": [ \"1.00\", \"1.50\", \"2.00\" ]\n  }\n}\n"
                ],
                "properties": {
                  "bareNumber": {
                    "default": true,
                    "description": "a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `€95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.",
                    "title": "bareNumber",
                    "type": "boolean"
                  },
                  "constraints": {
                    "description": "The following constraints are supported for `number` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "number"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maximum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "minimum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "decimalChar": {
                    "description": "A string whose value is used to represent a decimal point within the number. The default value is `.`.",
                    "type": "string"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `number`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "groupChar": {
                    "description": "A string whose value is used to group digits within the number. The default value is `null`. A common value is `,` e.g. '100,000'.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `number`.",
                    "enum": [
                      "number"
                    ]
                  }
                },
                "required": [
                  "name"
                ],
                "title": "Number Field",
                "type": "object"
              },
              {
                "context": "Integer values are indicated in the standard way for any valid integer.",
                "description": "The field contains integers - that is whole numbers.",
                "examples": [
                  "{\n  \"name\": \"age\",\n  \"type\": \"integer\",\n  \"constraints\": {\n    \"unique\": true,\n    \"minimum\": 100,\n    \"maximum\": 9999\n  }\n}\n"
                ],
                "properties": {
                  "bareNumber": {
                    "default": true,
                    "description": "a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `€95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.",
                    "title": "bareNumber",
                    "type": "boolean"
                  },
                  "constraints": {
                    "description": "The following constraints are supported for `integer` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "integer"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maximum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      },
                      "minimum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `integer`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `integer`.",
                    "enum": [
                      "integer"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Integer Field",
                "type": "object"
              },
              {
                "description": "The field contains temporal date values.",
                "examples": [
                  "{\n  \"name\": \"date_of_birth\",\n  \"type\": \"date\"\n}\n",
                  "{\n  \"name\": \"date_of_birth\",\n  \"type\": \"date\",\n  \"constraints\": {\n    \"minimum\": \"01-01-1900\"\n  }\n}\n",
                  "{\n  \"name\": \"date_of_birth\",\n  \"type\": \"date\",\n  \"format\": \"MM-DD-YYYY\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `date` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maximum": {
                        "type": "string"
                      },
                      "minimum": {
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string of YYYY-MM-DD.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                    "default": "default",
                    "description": "The format keyword options for `date` are `default`, `any`, and `{PATTERN}`."
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `date`.",
                    "enum": [
                      "date"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Date Field",
                "type": "object"
              },
              {
                "description": "The field contains temporal time values.",
                "examples": [
                  "{\n  \"name\": \"appointment_start\",\n  \"type\": \"time\"\n}\n",
                  "{\n  \"name\": \"appointment_start\",\n  \"type\": \"time\",\n  \"format\": \"any\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `time` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maximum": {
                        "type": "string"
                      },
                      "minimum": {
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string for time.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                    "default": "default",
                    "description": "The format keyword options for `time` are `default`, `any`, and `{PATTERN}`."
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `time`.",
                    "enum": [
                      "time"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Time Field",
                "type": "object"
              },
              {
                "description": "The field contains temporal datetime values.",
                "examples": [
                  "{\n  \"name\": \"timestamp\",\n  \"type\": \"datetime\"\n}\n",
                  "{\n  \"name\": \"timestamp\",\n  \"type\": \"datetime\",\n  \"format\": \"default\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `datetime` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maximum": {
                        "type": "string"
                      },
                      "minimum": {
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string for datetime.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                    "default": "default",
                    "description": "The format keyword options for `datetime` are `default`, `any`, and `{PATTERN}`."
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `datetime`.",
                    "enum": [
                      "datetime"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Date Time Field",
                "type": "object"
              },
              {
                "description": "A calendar year, being an integer with 4 digits. Equivalent to [gYear in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYear)",
                "examples": [
                  "{\n  \"name\": \"year\",\n  \"type\": \"year\"\n}\n",
                  "{\n  \"name\": \"year\",\n  \"type\": \"year\",\n  \"constraints\": {\n    \"minimum\": 1970,\n    \"maximum\": 2003\n  }\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `year` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "integer"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maximum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      },
                      "minimum": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `year`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `year`.",
                    "enum": [
                      "year"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Year Field",
                "type": "object"
              },
              {
                "description": "A calendar year month, being an integer with 1 or 2 digits. Equivalent to [gYearMonth in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYearMonth)",
                "examples": [
                  "{\n  \"name\": \"month\",\n  \"type\": \"yearmonth\"\n}\n",
                  "{\n  \"name\": \"month\",\n  \"type\": \"yearmonth\",\n  \"constraints\": {\n    \"minimum\": 1,\n    \"maximum\": 6\n  }\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `yearmonth` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maximum": {
                        "type": "string"
                      },
                      "minimum": {
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `yearmonth`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `yearmonth`.",
                    "enum": [
                      "yearmonth"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Year Month Field",
                "type": "object"
              },
              {
                "description": "The field contains boolean (true/false) data.",
                "examples": [
                  "{\n  \"name\": \"registered\",\n  \"type\": \"boolean\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `boolean` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "boolean"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "falseValues": {
                    "default": [
                      "false",
                      "False",
                      "FALSE",
                      "0"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `boolean`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "trueValues": {
                    "default": [
                      "true",
                      "True",
                      "TRUE",
                      "1"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `boolean`.",
                    "enum": [
                      "boolean"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Boolean Field",
                "type": "object"
              },
              {
                "description": "The field contains data which can be parsed as a valid JSON object.",
                "examples": [
                  "{\n  \"name\": \"extra\"\n  \"type\": \"object\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints apply for `object` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "object"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maxLength": {
                        "description": "An integer that specifies the maximum length of a value.",
                        "type": "integer"
                      },
                      "minLength": {
                        "description": "An integer that specifies the minimum length of a value.",
                        "type": "integer"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `object`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `object`.",
                    "enum": [
                      "object"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Object Field",
                "type": "object"
              },
              {
                "description": "The field contains data describing a geographic point.",
                "examples": [
                  "{\n  \"name\": \"post_office\",\n  \"type\": \"geopoint\"\n}\n",
                  "{\n  \"name\": \"post_office\",\n  \"type\": \"geopoint\",\n  \"format\": \"array\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `geopoint` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "array"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "object"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: A string of the pattern 'lon, lat', where `lon` is the longitude and `lat` is the latitude.\n  * **array**: An array of exactly two items, where each item is either a number, or a string parsable as a number, and the first item is `lon` and the second item is `lat`.\n  * **object**: A JSON object with exactly two keys, `lat` and `lon`",
                    "default": "default",
                    "description": "The format keyword options for `geopoint` are `default`,`array`, and `object`.",
                    "enum": [
                      "default",
                      "array",
                      "object"
                    ],
                    "notes": [
                      "Implementations `MUST` strip all white space in the default format of `lon, lat`."
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `geopoint`.",
                    "enum": [
                      "geopoint"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "GeoPoint Field",
                "type": "object"
              },
              {
                "description": "The field contains a JSON object according to GeoJSON or TopoJSON",
                "examples": [
                  "{\n  \"name\": \"city_limits\",\n  \"type\": \"geojson\"\n}\n",
                  "{\n  \"name\": \"city_limits\",\n  \"type\": \"geojson\",\n  \"format\": \"topojson\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `geojson` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "object"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maxLength": {
                        "description": "An integer that specifies the maximum length of a value.",
                        "type": "integer"
                      },
                      "minLength": {
                        "description": "An integer that specifies the minimum length of a value.",
                        "type": "integer"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "context": "The following `format` options are supported:\n  * **default**: A geojson object as per the [GeoJSON spec](http://geojson.org/).\n  * **topojson**: A topojson object as per the [TopoJSON spec](https://github.com/topojson/topojson-specification/blob/master/README.md)",
                    "default": "default",
                    "description": "The format keyword options for `geojson` are `default` and `topojson`.",
                    "enum": [
                      "default",
                      "topojson"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `geojson`.",
                    "enum": [
                      "geojson"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "GeoJSON Field",
                "type": "object"
              },
              {
                "description": "The field contains data which can be parsed as a valid JSON array.",
                "examples": [
                  "{\n  \"name\": \"options\"\n  \"type\": \"array\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints apply for `array` fields.",
                    "properties": {
                      "enum": {
                        "oneOf": [
                          {
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          },
                          {
                            "items": {
                              "type": "array"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                          }
                        ]
                      },
                      "maxLength": {
                        "description": "An integer that specifies the maximum length of a value.",
                        "type": "integer"
                      },
                      "minLength": {
                        "description": "An integer that specifies the minimum length of a value.",
                        "type": "integer"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `array`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `array`.",
                    "enum": [
                      "array"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Array Field",
                "type": "object"
              },
              {
                "context": "The lexical representation for duration is the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) extended format `PnYnMnDTnHnMnS`, where `nY` represents the number of years, `nM` the number of months, `nD` the number of days, 'T' is the date/time separator, `nH` the number of hours, `nM` the number of minutes and `nS` the number of seconds. The number of seconds can include decimal digits to arbitrary precision. Date and time elements including their designator may be omitted if their value is zero, and lower order elements may also be omitted for reduced precision. Here we follow the definition of [XML Schema duration datatype](http://www.w3.org/TR/xmlschema-2/#duration) directly and that definition is implicitly inlined here.",
                "description": "The field contains a duration of time.",
                "examples": [
                  "{\n  \"name\": \"period\"\n  \"type\": \"duration\"\n}\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints are supported for `duration` fields.",
                    "properties": {
                      "enum": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "maximum": {
                        "type": "string"
                      },
                      "minimum": {
                        "type": "string"
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "format": {
                    "default": "default",
                    "description": "There are no format keyword options for `duration`: only `default` is allowed.",
                    "enum": [
                      "default"
                    ]
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `duration`.",
                    "enum": [
                      "duration"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Duration Field",
                "type": "object"
              },
              {
                "description": "Any value is accepted, including values that are not captured by the type/format/constraint requirements of the specification.",
                "examples": [
                  "{\n  \"name\": \"notes\",\n  \"type\": \"any\"\n"
                ],
                "properties": {
                  "constraints": {
                    "description": "The following constraints apply to `any` fields.",
                    "properties": {
                      "enum": {
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "required": {
                        "context": "An empty string is considered to be a missing value.",
                        "description": "Indicates whether a property must have a value for each instance.",
                        "type": "boolean"
                      },
                      "unique": {
                        "description": "When `true`, each value for the property `MUST` be unique.",
                        "type": "boolean"
                      }
                    },
                    "title": "Constraints",
                    "type": "object"
                  },
                  "description": {
                    "description": "A text description. Markdown is encouraged.",
                    "examples": [
                      "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                    ],
                    "title": "Description",
                    "type": "string"
                  },
                  "example": {
                    "description": "An example value for the field.",
                    "examples": [
                      "{\n  \"example\": \"Put here an example value for your field\"\n}\n"
                    ],
                    "title": "Example",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name for this field.",
                    "title": "Name",
                    "type": "string"
                  },
                  "rdfType": {
                    "description": "The RDF type for this field.",
                    "type": "string"
                  },
                  "title": {
                    "description": "A human-readable title.",
                    "examples": [
                      "{\n  \"title\": \"My Package Title\"\n}\n"
                    ],
                    "title": "Title",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type keyword, which `MUST` be a value of `any`.",
                    "enum": [
                      "any"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "title": "Any Field",
                "type": "object"
              }
            ],
            "title": "Table Schema Field",
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "foreignKeys": {
          "examples": [
            "{\n  \"foreignKeys\": [\n    {\n      \"fields\": \"state\",\n      \"reference\": {\n        \"resource\": \"the-resource\",\n        \"fields\": \"state_id\"\n      }\n    }\n  ]\n}\n",
            "{\n  \"foreignKeys\": [\n    {\n      \"fields\": \"state\",\n      \"reference\": {\n        \"resource\": \"\",\n        \"fields\": \"id\"\n      }\n    }\n  ]\n}\n"
          ],
          "items": {
            "description": "Table Schema Foreign Key",
            "oneOf": [
              {
                "properties": {
                  "fields": {
                    "items": {
                      "description": "Fields that make up the primary key.",
                      "minItems": 1,
                      "type": "string",
                      "uniqueItems": true
                    },
                    "type": "array"
                  },
                  "reference": {
                    "properties": {
                      "fields": {
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "resource": {
                        "default": "",
                        "type": "string"
                      }
                    },
                    "required": [
                      "resource",
                      "fields"
                    ],
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "fields": {
                    "description": "Fields that make up the primary key.",
                    "type": "string"
                  },
                  "reference": {
                    "properties": {
                      "fields": {
                        "type": "string"
                      },
                      "resource": {
                        "default": "",
                        "type": "string"
                      }
                    },
                    "required": [
                      "resource",
                      "fields"
                    ],
                    "type": "object"
                  }
                }
              }
            ],
            "required": [
              "fields",
              "reference"
            ],
            "title": "Table Schema Foreign Key",
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "missingValues": {
          "context": "Many datasets arrive with missing data values, either because a value was not collected or it never existed.\nMissing values may be indicated simply by the value being empty in other cases a special value may have been used e.g. `-`, `NaN`, `0`, `-9999` etc.\nThe `missingValues` property provides a way to indicate that these values should be interpreted as equivalent to null.\n\n`missingValues` are strings rather than being the data type of the particular field. This allows for comparison prior to casting and for fields to have missing value which are not of their type, for example a `number` field to have missing values indicated by `-`.\n\nThe default value of `missingValue` for a non-string type field is the empty string `''`. For string type fields there is no default for `missingValue` (for string fields the empty string `''` is a valid value and need not indicate null).",
          "default": [
            ""
          ],
          "description": "Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.",
          "examples": [
            "{\n  \"missingValues\": [\n    \"-\",\n    \"NaN\",\n    \"\"\n  ]\n}\n",
            "{\n  \"missingValues\": []\n}\n"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "primaryKey": {
          "context": "Field name in the `primaryKey` `MUST` be unique, and `MUST` match a field name in the associated table. It is acceptable to have an array with a single value, indicating that the value of a single field is the primary key.",
          "description": "A primary key is a field name or an array of field names, whose values `MUST` uniquely identify each row in the table.",
          "examples": [
            "{\n  \"primaryKey\": [\n    \"name\"\n  ]\n}\n",
            "{\n  \"primaryKey\": [\n    \"first_name\",\n    \"last_name\"\n  ]\n}\n"
          ],
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "propertyOrder": 40,
      "required": [
        "fields"
      ],
      "title": "Table Schema",
      "type": [
        "string",
        "object"
      ]
    },
    "sources": {
      "description": "The raw sources for this resource.",
      "examples": [
        "{\n  \"sources\": [\n    {\n      \"title\": \"World Bank and OECD\",\n      \"path\": \"http://data.worldbank.org/indicator/NY.GDP.MKTP.CD\"\n    }\n  ]\n}\n"
      ],
      "items": {
        "description": "A source file.",
        "properties": {
          "email": {
            "description": "An email address.",
            "examples": [
              "{\n  \"email\": \"example@example.com\"\n}\n"
            ],
            "format": "email",
            "title": "Email",
            "type": "string"
          },
          "path": {
            "context": "Implementations need to negotiate the type of path provided, and dereference the data accordingly.",
            "description": "A fully qualified URL, or a POSIX file path.",
            "examples": [
              "{\n  \"path\": \"file.csv\"\n}\n",
              "{\n  \"path\": \"http://example.com/file.csv\"\n}\n"
            ],
            "pattern": "^(?=^[^./~])(^((?!\\.{2}).)*$).*$",
            "title": "Path",
            "type": "string"
          },
          "title": {
            "description": "A human-readable title.",
            "examples": [
              "{\n  \"title\": \"My Package Title\"\n}\n"
            ],
            "title": "Title",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "title": "Source",
        "type": "object"
      },
      "minItems": 0,
      "options": {
        "hidden": true
      },
      "propertyOrder": 140,
      "title": "Sources",
      "type": "array"
    },
    "title": {
      "description": "A human-readable title.",
      "examples": [
        "{\n  \"title\": \"My Package Title\"\n}\n"
      ],
      "propertyOrder": 50,
      "title": "Title",
      "type": "string"
    }
  },
  "title": "Tabular Data Resource",
  "type": "object"
}