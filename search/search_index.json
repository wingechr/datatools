{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start","text":""},{"location":"#readme","title":"README","text":""},{"location":"#installation","title":"Installation","text":"<p><code>pip install wingechr-datatools</code></p>"},{"location":"api/","title":"API","text":""},{"location":"api/#datatools","title":"<code>datatools</code>","text":""},{"location":"api/#datatools.Function","title":"<code>Function</code>","text":"<p>can be used as decorator around functions</p>"},{"location":"api/#datatools.Function.metadata","title":"<code>metadata: MetadataDict</code>  <code>cached</code> <code>property</code>","text":"<p>Metadata about the function.</p>"},{"location":"api/#datatools.Function.__call__","title":"<code>__call__(*args: Any, **kwargs: Any)</code>","text":"<p>Call the underlying function.</p>"},{"location":"api/#datatools.Metadata","title":"<code>Metadata</code>  <code>dataclass</code>","text":"<p>Interface to get/set metadata.</p>"},{"location":"api/#datatools.Metadata.get","title":"<code>get(key: Union[MetadataKey, Iterable[MetadataKey]]) -&gt; Union[MetadataValue, dict[MetadataKey, MetadataValue]]</code>","text":"<p>Get metadata entry for resource.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>MetadataKey</code> <p>metadata key</p> required <p>Returns:</p> Type Description <code>MetadataValue</code> <p>metadata value</p>"},{"location":"api/#datatools.Metadata.set","title":"<code>set(**key_vals: Any) -&gt; None</code>","text":"<p>Set (mutliple) metadata entries for resource.</p> <p>Parameters:</p> Name Type Description Default <code>**key_vals</code> <code>dict</code> <p>key value pars of metadata</p> <code>{}</code>"},{"location":"api/#datatools.Resource","title":"<code>Resource</code>  <code>dataclass</code>","text":"<p>Proxy object of stored data (and metadata).</p>"},{"location":"api/#datatools.Resource.metadata","title":"<code>metadata: Metadata</code>  <code>cached</code> <code>property</code>","text":"<p>Get metadata interface resource.</p> <p>Returns:</p> Type Description <code>Metadata</code>"},{"location":"api/#datatools.Resource.delete","title":"<code>delete() -&gt; None</code>","text":"<p>Delete resource's data (and metadata).</p>"},{"location":"api/#datatools.Resource.exist","title":"<code>exist() -&gt; bool</code>","text":"<p>Check if resource has data stored (metadata will be ignored).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if data for resource exists.</p>"},{"location":"api/#datatools.Resource.open","title":"<code>open() -&gt; IOBase</code>","text":"<p>Open binary data stream for resource.</p> <p>Returns:</p> Type Description <code>IOBase</code> <p>Binary data stream</p>"},{"location":"api/#datatools.Resource.write","title":"<code>write(data: IOBase) -&gt; None</code>","text":"<p>Write resource data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>IOBase</code> <p>Binary data stream</p> required"},{"location":"api/#datatools.Storage","title":"<code>Storage</code>  <code>dataclass</code>","text":""},{"location":"api/#datatools.Storage.get_valid_resource_name","title":"<code>get_valid_resource_name(name: ResourceName) -&gt; ResourceName</code>","text":"<p>Validate resource name, if not valid, raise exception.</p>"},{"location":"api/#datatools.Storage.list","title":"<code>list(**filters: Any) -&gt; Iterable[Resource]</code>","text":"<p>Iterate over resources in storage (optionally implemented filters)</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>dict</code> <p>Additional settings to filter resources, depends on implementation.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Iterable of Resource</code>"},{"location":"api/#datatools.Storage.resource","title":"<code>resource(name: ResourceName) -&gt; Resource</code>","text":"<p>Return resource for given name. Path might be changed</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>ResourceName</code> <p>unique resource name ins storage</p> required <p>Returns:</p> Type Description <code>Resource</code>"},{"location":"api/#datatools.Storage.write","title":"<code>write(data: IOBase, suffix: str = '', hashtype: Literal['md5', 'sha256'] = 'md5') -&gt; Resource</code>","text":"<p>Return resource, name will be generated by hashsum, data will be saved.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>IOBase</code> <p>Binary data stream</p> required <code>suffix</code> <code>str</code> <p>prefix for file name, by default \"\"</p> <code>''</code> <code>hashtype</code> <code>Literal['md5', 'sha256']</code> <p>hashing method, by default \"md5\"</p> <code>'md5'</code> <p>Returns:</p> Type Description <code>Resource</code>"},{"location":"example/","title":"Example","text":"<pre><code>from datatools import Function, Storage  # noqa: F401\n</code></pre>"}]}